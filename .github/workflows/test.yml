name: 🧪 Test Liquibase Installer

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC to catch upstream changes
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of test to run'
        required: true
        default: 'quick'
        type: choice
        options:
          - quick
          - full
          - ubuntu
          - debian
          - rhel
          - alpine
      include_arm64:
        description: 'Include ARM64 architecture tests'
        required: false
        default: false
        type: boolean

env:
  # Prevent Docker from consuming too much disk space
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  validate-installer:
    name: 🔍 Validate Installer Script
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Lint shell script
        run: |
          sudo apt-get update -y
          sudo apt-get install -y shellcheck
          echo "::group::ShellCheck Results"
          shellcheck install.sh
          echo "::endgroup::"

      - name: ✅ Test script syntax
        run: |
          bash -n install.sh
          bash -n run-tests.sh
          bash -n test-runner.sh
          bash -n test-coordinator.sh

      - name: 🧪 Test help functionality
        run: |
          chmod +x install.sh
          ./install.sh --help

      - name: 🌐 Test dry run functionality
        run: |
          echo "::group::OSS Dry Run Test"
          DRY_RUN=true ./install.sh latest oss
          echo "::endgroup::"
          
          echo "::group::Secure Dry Run Test"  
          DRY_RUN=true ./install.sh 5.0.0 secure
          echo "::endgroup::"

  test-installer:
    name: 🐳 Test on ${{ matrix.test-suite }}
    runs-on: ubuntu-latest
    needs: validate-installer
    strategy:
      fail-fast: false
      matrix:
        test-suite:
          - name: "Quick Suite"
            flag: "--quick"
          - name: "Ubuntu Only"
            flag: "ubuntu"
          - name: "Debian Only" 
            flag: "debian"
          - name: "Alpine Only"
            flag: "alpine"

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🧹 Clean up Docker space
        run: |
          docker system prune -af
          docker volume prune -af

      - name: 🧪 Run ${{ matrix.test-suite.name }}
        run: |
          echo "::group::Running ${{ matrix.test-suite.name }}"
          chmod +x run-tests.sh
          ./run-tests.sh ${{ matrix.test-suite.flag }} --coordinator --clean
          echo "::endgroup::"

      - name: 📊 Show test results
        if: always()
        run: |
          echo "::group::Container Results"
          make results || echo "No containers found"
          echo "::endgroup::"

      - name: 🧹 Cleanup containers
        if: always()
        run: |
          make clean || true

  test-full-suite:
    name: 🌐 Full Test Suite
    runs-on: ubuntu-latest
    needs: validate-installer
    # Only run full suite on main branch or manual trigger
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx  
        uses: docker/setup-buildx-action@v3

      - name: 🧹 Clean up Docker space
        run: |
          docker system prune -af
          docker volume prune -af
          df -h

      - name: 🧪 Run full test suite
        run: |
          echo "::group::Running Full Test Suite"
          chmod +x run-tests.sh
          timeout 30m ./run-tests.sh --full --coordinator --clean || {
            echo "Test suite timed out or failed"
            exit 1
          }
          echo "::endgroup::"

      - name: 📊 Show detailed test results
        if: always()
        run: |
          echo "::group::Detailed Container Results"
          make results || echo "No containers found"
          echo "::endgroup::"

      - name: 🧹 Final cleanup
        if: always()
        run: |
          make clean || true
          docker system prune -af || true

  test-arm64:
    name: 🏗️ Test ARM64 Architecture
    runs-on: ubuntu-latest
    needs: validate-installer
    # Only run ARM64 tests on manual trigger or main branch
    if: (github.event_name == 'workflow_dispatch' && github.event.inputs.include_arm64 == 'true') || github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up QEMU for ARM64 emulation
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: 🧪 Run ARM64 tests
        run: |
          echo "::group::Running ARM64 Tests"
          chmod +x run-tests.sh
          timeout 45m ./run-tests.sh --arm64 --coordinator --clean || {
            echo "ARM64 test suite timed out or failed"
            exit 1
          }
          echo "::endgroup::"

      - name: 📊 Show ARM64 test results
        if: always()
        run: |
          echo "::group::ARM64 Container Results"
          make results || echo "No containers found"
          echo "::endgroup::"

      - name: 🧹 ARM64 cleanup
        if: always()
        run: |
          make clean || true

  test-manual-target:
    name: 🎯 Manual Test Target
    runs-on: ubuntu-latest
    needs: validate-installer
    # Only run on manual workflow dispatch
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🐳 Set up QEMU (if ARM64 requested)
        if: github.event.inputs.include_arm64 == 'true'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: 🧪 Run manual test target
        run: |
          TARGET="${{ github.event.inputs.test_type }}"
          ARM64_FLAG=""
          
          if [ "${{ github.event.inputs.include_arm64 }}" == "true" ]; then
            ARM64_FLAG="--arm64"
          fi
          
          echo "::group::Running Manual Test: $TARGET"
          chmod +x run-tests.sh
          
          if [ "$TARGET" == "full" ]; then
            timeout 30m ./run-tests.sh --full $ARM64_FLAG --coordinator --clean
          elif [ "$TARGET" == "quick" ]; then
            ./run-tests.sh --quick $ARM64_FLAG --coordinator --clean
          else
            ./run-tests.sh $TARGET $ARM64_FLAG --coordinator --clean
          fi
          echo "::endgroup::"

      - name: 📊 Show manual test results
        if: always()
        run: |
          echo "::group::Manual Test Results"
          make results || echo "No containers found"
          echo "::endgroup::"

      - name: 🧹 Manual test cleanup
        if: always()
        run: |
          make clean || true

  report-results:
    name: 📈 Test Results Summary
    runs-on: ubuntu-latest
    needs: [validate-installer, test-installer, test-full-suite]
    if: always()
    
    steps:
      - name: 📊 Generate test summary
        run: |
          echo "## 🧪 Liquibase Installer Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.validate-installer.result }}" == "success" ]; then
            echo "✅ **Installer Validation**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Installer Validation**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.test-installer.result }}" == "success" ]; then
            echo "✅ **Platform Tests**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Platform Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.test-full-suite.result }}" == "success" ]; then
            echo "✅ **Full Test Suite**: PASSED" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.test-full-suite.result }}" == "skipped" ]; then
            echo "⏭️ **Full Test Suite**: SKIPPED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Full Test Suite**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tested Platforms:** Ubuntu, Debian, CentOS, Rocky Linux, Fedora, Alpine, Amazon Linux, Arch Linux, openSUSE" >> $GITHUB_STEP_SUMMARY
          echo "**Test Coverage:** OSS & Secure editions, Platform detection, Error handling, Actual installation" >> $GITHUB_STEP_SUMMARY