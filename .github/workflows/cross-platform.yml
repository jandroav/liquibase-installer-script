name: 🌐 Cross-Platform Testing

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-cross-platform:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            name: "🐧 Ubuntu"
          - os: macos-latest  
            name: "🍎 macOS"
          - os: windows-latest
            name: "🪟 Windows (Git Bash)"

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Git Bash (Windows)
        if: runner.os == 'Windows'
        run: |
          # Git Bash comes pre-installed on GitHub Windows runners
          echo "Using Git Bash on Windows"

      - name: ℹ️  System Information
        shell: bash
        run: |
          echo "🖥️  OS: $(uname -s)"
          echo "🏗️  Architecture: $(uname -m)"
          echo "📝 Shell: $0"
          echo "🔧 Available tools:"
          command -v curl && echo "  ✅ curl" || echo "  ❌ curl"
          command -v wget && echo "  ✅ wget" || echo "  ❌ wget"
          command -v tar && echo "  ✅ tar" || echo "  ❌ tar"
          command -v jq && echo "  ✅ jq" || echo "  ❌ jq"

      - name: 🧪 Test Help Command
        shell: bash
        run: |
          chmod +x install.sh
          ./install.sh --help

      - name: 🌐 Test Platform Detection
        shell: bash
        run: |
          echo "Testing platform detection..."
          DRY_RUN=true VERBOSE=true ./install.sh 2>&1 | grep "Detecting platform"

      - name: 📦 Test OSS Dry Run
        shell: bash
        run: |
          echo "Testing OSS dry run..."
          DRY_RUN=true ./install.sh latest oss

      - name: 🏢 Test Secure Dry Run  
        shell: bash
        run: |
          echo "Testing Secure dry run..."
          DRY_RUN=true ./install.sh 5.0.0 secure

      - name: ⚠️  Test Error Handling
        shell: bash
        run: |
          echo "Testing error handling..."
          OUTPUT=$(./install.sh invalid.version 2>&1 || true)
          echo "Captured output:"
          echo "$OUTPUT"
          if echo "$OUTPUT" | grep -q "Unknown argument"; then
            echo "✅ Error handling works"
          else
            echo "❌ Error handling failed - pattern not found"
            exit 1
          fi

      - name: 🚀 Test Actual Installation (OSS only)
        shell: bash
        run: |
          echo "Testing actual OSS installation..."
          VERBOSE=true ./install.sh latest oss
          
          # Debug: Show what files were actually created
          echo "Debug: Checking installation files..."
          echo "HOME directory: $HOME"
          if [ -d "$HOME/.local" ]; then
            echo "Contents of $HOME/.local:"
            ls -la "$HOME/.local"
            if [ -d "$HOME/.local/bin" ]; then
              echo "Contents of $HOME/.local/bin:"
              ls -la "$HOME/.local/bin"
            fi
            if [ -d "$HOME/.local/lib" ]; then
              echo "Contents of $HOME/.local/lib:"
              ls -la "$HOME/.local/lib"
            fi
          fi
          
          # Verify installation  
          if command -v liquibase >/dev/null 2>&1; then
            echo "✅ Liquibase installed successfully"
            liquibase --version
          else
            echo "❌ Liquibase not found in PATH"
            exit 1
          fi

  test-summary:
    name: 📊 Cross-Platform Summary
    runs-on: ubuntu-latest
    needs: test-cross-platform
    if: always()
    
    steps:
      - name: 📈 Generate Summary
        run: |
          echo "## 🌐 Cross-Platform Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.test-cross-platform.result }}" == "success" ]; then
            echo "✅ **All platforms**: PASSED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ 🐧 **Ubuntu**: Native bash environment" >> $GITHUB_STEP_SUMMARY  
            echo "✅ 🍎 **macOS**: Native zsh/bash environment" >> $GITHUB_STEP_SUMMARY
            echo "✅ 🪟 **Windows**: Git Bash environment" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Some platforms failed**" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Test Coverage**: Platform detection, OSS & Secure editions, Error handling, Actual installation" >> $GITHUB_STEP_SUMMARY